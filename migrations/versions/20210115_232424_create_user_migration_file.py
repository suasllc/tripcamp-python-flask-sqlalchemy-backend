"""create user migration file

Revision ID: 2417f0010f46
Revises: 
Create Date: 2021-01-15 23:24:24.324755

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2417f0010f46'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table('Messages')
    # op.drop_table('Bookings')
    # op.drop_table('Relationships')
    # op.drop_table('Media')
    # op.drop_table('SequelizeMeta')
    # op.drop_table('Categories')
    # op.drop_table('Amenities')
    # op.drop_table('SpotAmenities')
    # op.drop_table('CategorySpots')
    # op.drop_table('Ownerships')
    # op.drop_table('Attractions')
    # op.drop_index('UserProfiles_userId_idx', table_name='UserProfiles')
    # op.drop_table('UserProfiles')
    # op.drop_table('SequelizeData')
    # op.drop_table('SpotAttractions')
    # op.drop_column('Reviews', 'updatedAt')
    # op.drop_column('Reviews', 'createdAt')
    # op.drop_column('Spots', 'updatedAt')
    # op.drop_column('Spots', 'createdAt')
    # op.create_unique_constraint(None, 'Users', ['hashedPassword'])
    # op.drop_column('Users', 'updatedAt')
    # op.drop_column('Users', 'createdAt')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column('Users', sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    # op.add_column('Users', sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    # op.drop_constraint(None, 'Users', type_='unique')
    # op.add_column('Spots', sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    # op.add_column('Spots', sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    # op.add_column('Reviews', sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    # op.add_column('Reviews', sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    # op.create_table('SpotAttractions',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"SpotAttractions_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('attractionId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('spotId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['attractionId'], ['Attractions.id'], name='SpotAttractions_attractionId_fkey'),
    # sa.ForeignKeyConstraint(['spotId'], ['Spots.id'], name='SpotAttractions_spotId_fkey'),
    # sa.PrimaryKeyConstraint('id', name='SpotAttractions_pkey')
    # )
    # op.create_table('SequelizeData',
    # sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('name', name='SequelizeData_pkey')
    # )
    # op.create_table('UserProfiles',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"UserProfiles_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('firstName', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('lastName', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('mediaUrlIds', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    # sa.Column('streetAddress', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    # sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('stateProvince', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('gpsLocation', postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=True),
    # sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('favorites', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    # sa.Column('rank', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('followers', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    # sa.Column('followings', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    # sa.Column('cashEarned', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('cashSpent', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('badge', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('zipCode', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    # sa.ForeignKeyConstraint(['userId'], ['Users.id'], name='UserProfiles_userId_fkey'),
    # sa.PrimaryKeyConstraint('id', name='UserProfiles_pkey')
    # )
    # op.create_index('UserProfiles_userId_idx', 'UserProfiles', ['userId'], unique=True)
    # op.create_table('Attractions',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Attractions_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    # sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    # sa.Column('gpsLocation', postgresql.ARRAY(postgresql.DOUBLE_PRECISION(precision=53)), autoincrement=False, nullable=False),
    # sa.Column('mediaUrlIds', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    # sa.Column('activities', postgresql.ARRAY(sa.VARCHAR(length=100)), autoincrement=False, nullable=True),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name='Attractions_pkey'),
    # sa.UniqueConstraint('name', name='Attractions_name_key')
    # )
    # op.create_table('Ownerships',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Ownerships_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('spotId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('status', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['spotId'], ['Spots.id'], name='Ownerships_spotId_fkey'),
    # sa.ForeignKeyConstraint(['userId'], ['Users.id'], name='Ownerships_userId_fkey'),
    # sa.PrimaryKeyConstraint('id', name='Ownerships_pkey')
    # )
    # op.create_table('CategorySpots',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"CategorySpots_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('spotId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('categoryId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['categoryId'], ['Categories.id'], name='CategorySpots_categoryId_fkey'),
    # sa.ForeignKeyConstraint(['spotId'], ['Spots.id'], name='CategorySpots_spotId_fkey'),
    # sa.PrimaryKeyConstraint('id', name='CategorySpots_pkey')
    # )
    # op.create_table('SpotAmenities',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"SpotAmenities_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('spotId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('amenityId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['amenityId'], ['Amenities.id'], name='SpotAmenities_amenityId_fkey'),
    # sa.ForeignKeyConstraint(['spotId'], ['Spots.id'], name='SpotAmenities_spotId_fkey'),
    # sa.PrimaryKeyConstraint('id', name='SpotAmenities_pkey')
    # )
    # op.create_table('Amenities',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Amenities_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    # sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('type', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('mediaUrlIds', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name='Amenities_pkey'),
    # sa.UniqueConstraint('name', name='Amenities_name_key')
    # )
    # op.create_table('Categories',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Categories_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name='Categories_pkey'),
    # sa.UniqueConstraint('name', name='Categories_name_key')
    # )
    # op.create_table('SequelizeMeta',
    # sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('name', name='SequelizeMeta_pkey')
    # )
    # op.create_table('Media',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Media_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    # sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    # sa.Column('type', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    # sa.Column('source', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.PrimaryKeyConstraint('id', name='Media_pkey'),
    # sa.UniqueConstraint('url', name='Media_url_key')
    # )
    # op.create_table('Relationships',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Relationships_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('user1Id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('user2Id', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('status', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('lastActionUserId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('followingship', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['lastActionUserId'], ['Users.id'], name='Relationships_lastActionUserId_fkey'),
    # sa.ForeignKeyConstraint(['user1Id'], ['Users.id'], name='Relationships_user1Id_fkey'),
    # sa.ForeignKeyConstraint(['user2Id'], ['Users.id'], name='Relationships_user2Id_fkey'),
    # sa.PrimaryKeyConstraint('id', name='Relationships_pkey'),
    # sa.UniqueConstraint('user1Id', 'user2Id', name='Relationships_user1Id_user2Id_key')
    # )
    # op.create_table('Bookings',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Bookings_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('spotId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('startDate', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    # sa.Column('endDate', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    # sa.Column('guests', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('status', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('specialRequest', sa.TEXT(), autoincrement=False, nullable=True),
    # sa.Column('cost', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['spotId'], ['Spots.id'], name='Bookings_spotId_fkey'),
    # sa.ForeignKeyConstraint(['userId'], ['Users.id'], name='Bookings_userId_fkey'),
    # sa.PrimaryKeyConstraint('id', name='Bookings_pkey')
    # )
    # op.create_table('Messages',
    # sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"Messages_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    # sa.Column('senderId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('recipientId', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('body', sa.TEXT(), autoincrement=False, nullable=False),
    # sa.Column('status', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    # sa.Column('createdAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.Column('updatedAt', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    # sa.ForeignKeyConstraint(['recipientId'], ['Users.id'], name='Messages_recipientId_fkey'),
    # sa.ForeignKeyConstraint(['senderId'], ['Users.id'], name='Messages_senderId_fkey'),
    # sa.PrimaryKeyConstraint('id', name='Messages_pkey')
    # )
    # ### end Alembic commands ###
